/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Quitschy_Guy (https://sketchfab.com/Quitschy_Guy)
License: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)
Source: https://sketchfab.com/3d-models/dvd-bd-game-case-with-sample-labels-281f93100db0406ea448cbdc673158f5
Title: DVD BD Game Case with sample labels
*/

import React, { useEffect } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

export function GameCase({ cover, ...props }) {
  const { nodes, materials } = useGLTF(
    "/assets/dvd_bd_game_case_with_sample_labels.glb"
  );

  // Clone the cover material
  const coverMaterial = materials.cover.clone();

  // Load the texture for the cover
  const [coverTexture, setCoverTexture] = React.useState();

  useEffect(() => {
    new THREE.TextureLoader().load(cover, (texture) => {
      setCoverTexture(texture);
      coverMaterial.needsUpdate = true;
    });
  }, [cover, coverMaterial]);

  useEffect(() => {
    // Apply the texture to the cover material
    if (coverTexture) {
      coverMaterial.map = coverTexture;
      coverMaterial.needsUpdate = true;
    }
  }, [coverTexture, coverMaterial]);

  const meshRef = React.useRef();

  useFrame(({ clock }) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += 0.01; // rotation around the y-axis
    }
  });

  if (!coverTexture) return null;

  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]} ref={meshRef}>
          <group position={[0, 0.095, 0]} scale={[0.711, 1, 0.074]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_7.geometry}
              material={coverMaterial} // Use the cloned material
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_8.geometry}
              material={materials.Car_plastic_dark}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Object_9.geometry}
              material={materials.Car_plastic_dark}
            />
          </group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_5.geometry}
            material={materials.Car_plastic_dark}
            position={[0, 0.095, 0]}
            scale={[0.711, 1, 0.074]}
          />
        </group>
      </group>
    </group>
  );
}

export default GameCase;
